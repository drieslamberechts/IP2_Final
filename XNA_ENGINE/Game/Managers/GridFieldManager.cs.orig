using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using XNA_ENGINE.Engine;
using XNA_ENGINE.Engine.Scenegraph;
using XNA_ENGINE.Game.Objects;
using XNA_ENGINE.Game.Scenes;

namespace XNA_ENGINE.Game.Managers
{
    class GridFieldManager
    {
        public enum SelectionMode
        {
            select1x1,
            select2x2,
            select3x3,

            enumSize
        }

        //Singleton implementation
        private static GridFieldManager m_GridFieldManager;

        private GridTile[,] m_GridField;

        private const int GRID_ROW_LENGTH = 30;
        private const int GRID_COLUMN_LENGTH = 30;

        private SelectionMode m_SelectionMode = SelectionMode.select1x1;

        private GameScene m_GameScene;

        private List<Player> m_PlayersList;
        private Player m_UserPlayer;

        // private int GRID_OFFSET = 64;

        private Random m_Random;

        private GridFieldManager()
        {
            CreativeMode = false;

            m_Random = new Random();
        }

        static public GridFieldManager GetInstance()
        {
            if (m_GridFieldManager == null)
                m_GridFieldManager = new GridFieldManager();

            return m_GridFieldManager;
        }

        public void Update(RenderContext renderContext)
        {
            //Iterate over every GridTile
            for (int i = 0; i < GRID_ROW_LENGTH; ++i)
            {
                for (int j = 0; j < GRID_COLUMN_LENGTH; ++j)
                {
                    m_GridField[i,j].Update(renderContext);
                }
            }
            
            //Iterate over every Player
            Player attackPlayer = null;
            foreach (var player in m_PlayersList)
            {
                player.Update(renderContext);
                if (player.GetAttack()) attackPlayer = player; // If the player is under attack initiate the battlesequence!
            }

<<<<<<< HEAD
            Menu.GetInstance().Player.NewPlaceable(new Sjaman(m_GameScene, m_GridField[5, 5]));
            Menu.GetInstance().Player.NewPlaceable(new Army(m_GameScene, m_GridField[5, 6]));
            Menu.GetInstance().Player.NewPlaceable(new Villager(m_GameScene, m_GridField[5, 7]));
=======
            if (attackPlayer != null)
            {
                attackPlayer.ResetAttack();
                SceneManager.SetActiveScene("AttackScene");
            }
>>>>>>> Rewrote the gridfieldmanager + added some resources + changed how the building and units work
        }

        public void LoadMap(GameScene gameScene, string map)
        {
            m_GameScene = gameScene;

            // Load Map
            m_GridField = MapLoadSave.GetInstance().LoadMap(gameScene, map);

            //Iterate over every GridTile
            for (int i = 0; i < GRID_ROW_LENGTH; ++i)
            {
                for (int j = 0; j < GRID_COLUMN_LENGTH; ++j)
                {
                    m_GridField[i, j].Initialize();
                }
            }

            m_PlayersList = new List<Player>();

           // Menu.GetInstance().Player.NewPlaceable(new Shaman(m_GridField[5, 5]));
           // Menu.GetInstance().Player.NewPlaceable(new Army(m_GridField[5, 6]));
        }

        public void HandleInput(RenderContext renderContext)
        {
            var inputManager = PlayScene.GetInputManager();
            bool isMouseInScreen = PlayScene.IsMouseInScreen(renderContext);
            Menu.ModeSelected selectedMode = Menu.GetInstance().GetSelectedMode();

            Deselect();
            //Handle menu //If menu is hit don't do the grid test
            if (Menu.GetInstance().HandleInput(renderContext)) return; // hier in Menu -> klikken?
            if (m_UserPlayer.HandleInput(renderContext)) return;

            //Check if the mouse cursor is in the screen
            if (isMouseInScreen)
            {
                //Raycast to grid
                var hittedTile = HitTestField(PlayScene.CalculateCursorRay(renderContext));
                //Raycast to placeables
                var hittedPlaceable = HitTestPlaceables(PlayScene.CalculateCursorRay(renderContext));

                if (hittedPlaceable != null)
                {
                    Select(hittedPlaceable);
                }
                else if (hittedTile != null)
                {
                    Select(hittedTile);

                    if (inputManager.GetAction((int)PlayScene.PlayerInput.LeftClick).IsTriggered)
                    {
                        switch (selectedMode)
                        {
                            case Menu.ModeSelected.None:
                                PermanentDeselect();
                                break;
                            case Menu.ModeSelected.Attack:
                                break;
                            case Menu.ModeSelected.Defend:
                                break;
                            case Menu.ModeSelected.Gather:
                                break;
                            case Menu.ModeSelected.BuildSettlement:
                                BuildStructure(Placeable.PlaceableType.Settlement, m_UserPlayer);
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.BuildShrine:
                                BuildStructure(Placeable.PlaceableType.Shrine, m_UserPlayer);
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.BuildSchool:
                                BuildStructure(Placeable.PlaceableType.School, m_UserPlayer);
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.Delete:
                                //RemoveSettlementModel();
                                break;

                            // CREATE TILES WITH SHAMAN
                            case Menu.ModeSelected.BuildTile1:
                                hittedTile.SetType(GridTile.TileType.Spiked);
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.BuildTile2:
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.BuildTile3:
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            case Menu.ModeSelected.BuildTile4:
                                Menu.GetInstance().ResetSelectedMode();
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }

                    if (inputManager.GetAction((int)PlayScene.PlayerInput.RightClick).IsTriggered)
                    {
                        var selectedPlaceable = GetPermanentSelected();

                        //Place flag of settlement
                       /* if (GetPermanentSelectedTile() != null && GetPermanentSelectedTile().HasSettlement() != null)
                        {
                            //GetPermanentSelectedTile().HasSettlement().PlaceRallyPoint(hittedTile);
                        }

                        //Place flag of school
                        if (GetPermanentSelectedTile() != null && GetPermanentSelectedTile().HasSchool() != null)
                        {
                           // GetPermanentSelectedTile().HasSchool().PlaceRallyPoint(hittedTile);
                        }

                        //Place flag of shrine
                        if (GetPermanentSelectedTile() != null && GetPermanentSelectedTile().HasShrine() != null)
                        {
                            //GetPermanentSelectedTile().HasShrine().PlaceRallyPoint(hittedTile);
                        }*/
                        /*
                        if (selectedPlaceable != null && GetSelectedTiles() != null &&
                            selectedPlaceable.PlaceableTypeMeth == Placeable.PlaceableType.Villager)
                        {
                            selectedPlaceable.SetTargetTile(GetSelectedTiles());
                        }

                        if (selectedPlaceable != null && GetSelectedTiles() != null &&
                             selectedPlaceable.PlaceableTypeMeth == Placeable.PlaceableType.Shaman)
                        {
                            selectedPlaceable.SetTargetTile(GetSelectedTiles());
                        }

                        if (selectedPlaceable != null && GetSelectedTiles() != null &&
                             selectedPlaceable.PlaceableTypeMeth == Placeable.PlaceableType.Army)
                        {
                            selectedPlaceable.SetTargetTile(GetSelectedTiles());
                        }*/

                        //if (GetSelectedTile() != null && GetSelectedTile().HasShrine() != null))
                    }
                }
            }
        }

        public GridTile HitTestField(Ray ray)
        {
            //Iterate over every GridTile
            for (int i = 0; i < GRID_ROW_LENGTH; ++i)
            {
                for (int j = 0; j < GRID_COLUMN_LENGTH; ++j)
                {
                    if (m_GridField[i,j].HitTest(ray))
                        return m_GridField[i, j];
                }
            }

            return null;
        }

        public Placeable HitTestPlaceables(Ray ray)
        {
            //Iterate over every placeable
            foreach (var player in m_PlayersList)
            {
                foreach (var ownedPlaceable in player.GetOwnedList())
                {
                    if (ownedPlaceable.HitTest(ray))
                        return ownedPlaceable;
                }
            }

            return null;
        }

        public Placeable GetPermanentSelected()
        {
            foreach (var player in m_PlayersList)
                foreach (var placeable in player.GetOwnedList())
                    if (placeable.Model.PermanentSelected)
                        return placeable;

            return null;
        }

        public List<GridTile> GetSelectedTiles()
        {
            List<GridTile> returnList = new List<GridTile>();

            foreach (var gridTile in m_GridField)
            {
                if (gridTile.Selected)
                    returnList.Add(gridTile);
            }
            if (returnList.Any()) return returnList;

            return null;
        }

        public List<Placeable> GetSelectedPlaceables()
        {
            List<Placeable> returnList = new List<Placeable>();

            foreach (var player in m_PlayersList)
            {
                foreach (var ownedPlaceables in player.GetOwnedList())
                {
                    if (ownedPlaceables.Model.Selected)
                        returnList.Add(ownedPlaceables);
                }
            }
            if (returnList.Any()) return returnList;

            return null;
        }

        public void Select(GridTile tile)
        {
            switch (m_SelectionMode)
            {
                case SelectionMode.select1x1:
                    tile.Selected = true;
                    break;
                case SelectionMode.select2x2:
                    tile.Selected = true;
                    if (GetSWTile(tile) != null) GetSWTile(tile).Selected = true;
                    if (GetSTile(tile) != null) GetSTile(tile).Selected = true;
                    if (GetSETile(tile) != null) GetSETile(tile).Selected = true;
                    break;
                case SelectionMode.select3x3:
                    tile.Selected = true;
                    if (GetNWTile(tile) != null) GetNWTile(tile).Selected = true;
                    if (GetNTile(tile) != null) GetNTile(tile).Selected = true;
                    if (GetNETile(tile) != null) GetNETile(tile).Selected = true;
                    if (GetETile(tile) != null) GetETile(tile).Selected = true;
                    if (GetSETile(tile) != null) GetSETile(tile).Selected = true;
                    if (GetSTile(tile) != null) GetSTile(tile).Selected = true;
                    if (GetSWTile(tile) != null) GetSWTile(tile).Selected = true;
                    if (GetWTile(tile) != null) GetWTile(tile).Selected = true;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("SelectionMode (1x1, 2x2 or 3x3) is out of range in GridFieldManager");
            }
        }

        public void Select(Placeable placeable)
        {
            placeable.Model.Selected = true;
        }

        public void BuildStructure(Placeable.PlaceableType structureType, Player owner)
        {
            switch (structureType)
            {
                case Placeable.PlaceableType.Settlement:
                    owner.AddPlaceable(new Settlement(GetSelectedTiles()));
                    break;
                case Placeable.PlaceableType.School:
                    owner.AddPlaceable(new School(GetSelectedTiles()));
                    break;
                case Placeable.PlaceableType.Shrine:
                    owner.AddPlaceable(new Shrine(GetSelectedTiles()));
                    break;
                case Placeable.PlaceableType.RallyPoint:
                    break;
                case Placeable.PlaceableType.Villager:
                    break;
                case Placeable.PlaceableType.Army:
                    break;
                case Placeable.PlaceableType.Shaman:
                    break;
                default:
                    throw new ArgumentOutOfRangeException("structureType");
            }
        }

        public void AddPlayer(Player player)
        {
            m_PlayersList.Add(player);
        }

        public void SetUserPlayer(Player player)
        {
            m_UserPlayer = player;
        }

        public void Deselect()
        {
            foreach (var player in m_PlayersList)
                foreach (var ownedPlaceable in player.GetOwnedList())
                    ownedPlaceable.Model.Selected = false;
            
            foreach (var gridTile in m_GridField)
                gridTile.Selected = false;
        }

        public void PermanentDeselect()
        {
            foreach (var player in m_PlayersList)
                foreach (var placeable in player.GetOwnedList())
                    placeable.Model.PermanentSelected = false;
        }

        //Functions that pick a surrounding tile of another tile
        #region Surrounding tiles
        //NW and following names stand for north west....
        //NorthWest
        public GridTile GetNWTile(GridTile tile)
        {
            if (tile.Row <= 0) 
                return null;

            return m_GridField[tile.Row - 1, tile.Column];
        }

        //North
        public GridTile GetNTile(GridTile tile)
        {
            if (tile.Row <= 0 || tile.Column <= 0)
                return null;

            return m_GridField[tile.Row - 1, tile.Column - 1];
        }

        //NorthEast
        public GridTile GetNETile(GridTile tile)
        {
            if (tile.Column <= 0)
                return null;

            return m_GridField[tile.Row, tile.Column - 1];
        }

        //East
        public GridTile GetETile(GridTile tile)
        {
            if (tile.Row >= GRID_ROW_LENGTH - 1 || tile.Column <= 0)
                return null;

            return m_GridField[tile.Row +1, tile.Column - 1];
        }

        //SouthEast
        public GridTile GetSETile(GridTile tile)
        {
            if (tile.Row >= GRID_ROW_LENGTH -1)
                return null;

            return m_GridField[tile.Row +1, tile.Column];
        }

        //South
        public GridTile GetSTile(GridTile tile)
        {
            if (tile.Row >= GRID_ROW_LENGTH - 1 || tile.Column >= GRID_COLUMN_LENGTH - 1)
                return null;

            return m_GridField[tile.Row + 1, tile.Column + 1];
        }

        //SouthWest
        public GridTile GetSWTile(GridTile tile)
        {
            if (tile.Column >= GRID_COLUMN_LENGTH -1)
                return null;

            return m_GridField[tile.Row , tile.Column +1];
        }

        //West
        public GridTile GetWTile(GridTile tile)
        {
            if (tile.Row <= 0 || tile.Column >= GRID_COLUMN_LENGTH - 1)
                return null;

            return m_GridField[tile.Row -1 , tile.Column + 1];
        }

        //All surrounding tiles
        public List<GridTile> GetAllSurroundingTiles(GridTile tile)
        {
            List<GridTile> returnList = new List<GridTile>();

            if (GetNWTile(tile) != null) returnList.Add(GetNWTile(tile));
            if (GetNTile(tile) != null) returnList.Add(GetNTile(tile));
            if (GetNETile(tile) != null) returnList.Add(GetNETile(tile));
            if (GetETile(tile) != null) returnList.Add(GetETile(tile));
            if (GetSETile(tile) != null) returnList.Add(GetSETile(tile));
            if (GetSTile(tile) != null) returnList.Add(GetSTile(tile));
            if (GetSWTile(tile) != null) returnList.Add(GetSWTile(tile));
            if (GetWTile(tile) != null) returnList.Add(GetWTile(tile));

            return returnList;
        }

        #endregion

        public SelectionMode SelectionModeMeth
        {
            get { return m_SelectionMode; }
            set { m_SelectionMode = value; }
        }

        public GameScene GameScene
        {
            get { return m_GameScene; }
        }

        public Player UserPlayer
        {
            get { return m_UserPlayer; }
        }

        public void NextSelectionMode()
        {
            ++m_SelectionMode;
            if ((int)m_SelectionMode >= (int)SelectionMode.enumSize) m_SelectionMode = 0;
        }

        public Random Random
        {
            get { return m_Random; }
        }
        public GridTile[,] GridField
        {
            get { return m_GridField; }
        }

        public bool CreativeMode { get; set; }
    }
}
